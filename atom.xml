<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[王仙客的博客]]></title>
  <link href="http://Hydra2050.github.io/atom.xml" rel="self"/>
  <link href="http://Hydra2050.github.io/"/>
  <updated>2014-10-10T23:28:12+08:00</updated>
  <id>http://Hydra2050.github.io/</id>
  <author>
    <name><![CDATA[王仙客]]></name>
    <email><![CDATA[wh2050@sina.cn]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Python Challenge--Level 0]]></title>
    <link href="http://Hydra2050.github.io/blog/2014/10/10/the-python-challenge-level-0/"/>
    <updated>2014-10-10T22:51:40+08:00</updated>
    <id>http://Hydra2050.github.io/blog/2014/10/10/the-python-challenge-level-0</id>
    <content type="html"><![CDATA[<h2>引子</h2>

<p>最近空余时间，开始学习python，发现一个很有意思的网站：<a href="http://www.pythonchallenge.com/">pythonchallenge</a>。目前有33个挑战的级别，打算写一个系列的博客，记录下来学习的过程。那就从零开始吧！</p>

<h2>Level 0</h2>

<p>Level 0的地址：<a href="http://www.pythonchallenge.com/pc/def/0.html">http://www.pythonchallenge.com/pc/def/0.html</a></p>

<p>一张图片，上面写着2的38次方</p>

<pre><code>Hint: try to change the URL address.
</code></pre>

<p>使用python求2的38次方的值：</p>

<pre><code>import math
print(pow(2,38))
</code></pre>

<p>得到结果：274877906944</p>

<p>根据提示，修改url为：<a href="http://www.pythonchallenge.com/pc/def/274877906944.html">http://www.pythonchallenge.com/pc/def/274877906944.html</a>。</p>

<p>这样就进入下一关了， ^_^)</p>

<p>参考资料：</p>

<p><a href="http://sebug.net/paper/books/dive-into-python3/index.html">深入 Python 3</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Mac上iOS开发抓包的几种常用方法]]></title>
    <link href="http://Hydra2050.github.io/blog/2014/07/26/iosshe-bei-zhua-bao-de-ji-chong-chang-yong-fang-fa/"/>
    <updated>2014-07-26T21:56:07+08:00</updated>
    <id>http://Hydra2050.github.io/blog/2014/07/26/iosshe-bei-zhua-bao-de-ji-chong-chang-yong-fang-fa</id>
    <content type="html"><![CDATA[<p>在iOS开发中，经常需要抓包来查看网络请求、应答的情况，例如坚持服务端应答数据、服务端应答速度、客户端发生请求、流量检测、安全性检测等等。不论代码内如何实现，抓包能够最好的证实一切，往往可以更快地定位问题，解决问题。下面总结几种常用的抓包方法。</p>

<h2>使用charles抓包</h2>

<p>在mac下，<a href="http://www.charlesproxy.com/">charles</a>是一个非常好用的抓取http/https请求的工具。</p>

<p>限制条件：</p>

<ul>
<li>需要mac与iOS设备连接相同的无线网络</li>
<li>只能抓取http/https的数据包</li>
<li>无法抓取2G/3G/4G网络下得数据</li>
</ul>


<p>［注］：更多关于charles的使用方法参照<a href="http://www.charlesproxy.com/documentation/">http://www.charlesproxy.com/documentation/</a></p>

<h2>使用RVI（Remote Virtual Interface）+wireshark抓包</h2>

<p>在iOS5以后，Apple为iOS引入了RVI（Remote Virtual Interface），只要设备通过USB连接到Mac，就可以虚拟出一个远程端口，这样就可以在Mac上使用Wireshark抓取这个远程虚拟端口的数据包了。</p>

<p>限制条件：</p>

<ul>
<li>支持的设备系统iOS5以及之后</li>
</ul>


<h2>使用tcpdump命令抓包</h2>

<p>限制条件：</p>

<ul>
<li>需要iOS设备越狱</li>
</ul>


<h2>小结</h2>

<p>以上是平时常用到得几种抓包方法，各有优缺点，可以根据需要选择最方便的方法。</p>

<h2>参考资料</h2>

<p><a href="http://www.charlesproxy.com/">http://www.charlesproxy.com/</a></p>

<p><a href="http://www.charlesproxy.com/documentation/">http://www.charlesproxy.com/documentation/</a></p>

<p><a href="http://www.wireshark.org/">http://www.wireshark.org/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用UIMotionEffect实现设备的倾斜视差]]></title>
    <link href="http://Hydra2050.github.io/blog/2014/02/16/shi-yong-uimotioneffect/"/>
    <updated>2014-02-16T18:28:08+08:00</updated>
    <id>http://Hydra2050.github.io/blog/2014/02/16/shi-yong-uimotioneffect</id>
    <content type="html"><![CDATA[<p>iOS7更新后，当倾斜手机的时候，会看到屏幕上的背景图片会随着手机的倾斜度而移动，产生视差。刚开始更新的时候，还以为是自己的错觉，－－！。</p>

<p>UIMotionEffect就像它的名字一样，处理motion effect。UIMotionEffect是一个抽象的基类，子类通过重写<code>keyPathsAndRelativeValuesForViewerOffset:</code>方法，当检测到动作的时候</p>

<p>苹果提供了一个子类UIInterpolatingMotionEffect，通过它我们可以实现对设备水平和竖直方向倾斜。</p>

<pre><code>UIInterpolatingMotionEffect *horizontalMotionEffect = [[UIInterpolatingMotionEffect alloc] initWithKeyPath:@"center.x" type:UIInterpolatingMotionEffectTypeTiltAlongHorizontalAxis];
horizontalMotionEffect.minimumRelativeValue = @(-50);
horizontalMotionEffect.maximumRelativeValue = @(50);
[redView addMotionEffect:horizontalMotionEffect];
</code></pre>

<p><a href="http://www.teehanlax.com/blog/introduction-to-uimotioneffect/">http://www.teehanlax.com/blog/introduction-to-uimotioneffect/</a>
<a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIMotionEffect_class/Reference/Reference.html#//apple_ref/doc/uid/TP40013376">https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIMotionEffect_class/Reference/Reference.html#//apple_ref/doc/uid/TP40013376</a>
<a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIMotionEffectGroup_class/Reference/Reference.html#//apple_ref/doc/uid/TP40013378">https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIMotionEffectGroup_class/Reference/Reference.html#//apple_ref/doc/uid/TP40013378</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用NSLog打印CGPoint、CGSize、CGRect]]></title>
    <link href="http://Hydra2050.github.io/blog/2014/01/18/use-nslog-to-print-cgpoint-cgrect/"/>
    <updated>2014-01-18T22:02:46+08:00</updated>
    <id>http://Hydra2050.github.io/blog/2014/01/18/use-nslog-to-print-cgpoint-cgrect</id>
    <content type="html"><![CDATA[<p>平时调试程序的时候，经常会使用NSLog打印出来。当有CGPoint、CGSize、CGRect对象要打印时，一般要写成下面的方式：</p>

<pre><code>CGPoint point = CGPointMake(0, 20);
NSLog(@"Point: x=%f, y=%f", point.x, point.y);

CGSize size = CGSizeMake(200, 100);
NSLog(@"Size: w=%f, h=%f", size.width, size.height);

CGRect rect = CGRectMake(0, 0, 200, 100);
NSLog(@"Rect: x=%f, y=%f, w=%f, h=%f", rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
</code></pre>

<p>今天看到一篇文章：<a href="http://iosdevelopertips.com/debugging/how-to-use-nslog-to-debug-cgrect-and-cgpoint.html">How to Use NSLog to Debug CGRect and CGPoint</a>，才了解到有一些其他方便的方法。</p>

<pre><code>CGPoint point = CGPointMake(0, 20);
NSLog(@"Point: %@", NSStringFromCGPoint(point));

CGSize size = CGSizeMake(200, 100);
NSLog(@"Size: %@", NSStringFromCGSize(size));

CGRect rect = CGRectMake(0, 0, 200, 100);
NSLog(@"Rect: %@", NSStringFromCGRect(rect));
</code></pre>

<p>打印结果：</p>

<pre><code>Point: {0, 20}
Size: {200, 100}
Rect: \{\{0, 0\}, \{200, 100\}\}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发中一些常用的宏定义]]></title>
    <link href="http://Hydra2050.github.io/blog/2014/01/18/ioskai-fa-zhong-%5B%3F%5D-xie-chang-yong-de-hong-ding-yi/"/>
    <updated>2014-01-18T21:55:51+08:00</updated>
    <id>http://Hydra2050.github.io/blog/2014/01/18/ioskai-fa-zhong-[?]-xie-chang-yong-de-hong-ding-yi</id>
    <content type="html"><![CDATA[<p>Debug输出：</p>

<pre><code>#ifdef DEBUG
    #define debug(format, ...) CFShow([NSString stringWithFormat:format, ## __VA_ARGS__]);
    #define debugAlert(format, ...)  {UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@"%s\n line: %d ", __PRETTY_FUNCTION__, __LINE__] message:[NSString stringWithFormat:format, ##__VA_ARGS__]  delegate:nil cancelButtonTitle:@"Done" otherButtonTitles:nil]; [alert show]; [alert release];}
#else
    #define debug(format, ...) 
    #define debugAlert(format, ...)
#endif
</code></pre>

<p>检测是否支持ARC：</p>

<pre><code>#if __has_feature(objc_arc)
    // ARC
#else
    // No ARC
#endif
</code></pre>

<p><a href="http://iosdevelopertips.com/debugging/remove-debug-code-for-release-build.html">http://iosdevelopertips.com/debugging/remove-debug-code-for-release-build.html</a></p>

<p><a href="http://iosdevelopertips.com/debugging/display-debug-information-in-uialertview.html">http://iosdevelopertips.com/debugging/display-debug-information-in-uialertview.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Properties to a Category Using Associated Objects]]></title>
    <link href="http://Hydra2050.github.io/blog/2014/01/16/adding-properties-to-a-category-using-associated-objects/"/>
    <updated>2014-01-16T22:39:50+08:00</updated>
    <id>http://Hydra2050.github.io/blog/2014/01/16/adding-properties-to-a-category-using-associated-objects</id>
    <content type="html"><![CDATA[<h2>Object-C中的Category</h2>

<p>Object-C中的Category，相信大家一定不会陌生。一般来说，我们可以用它来为一个类添加新的方法：</p>

<pre><code>@interface NSString (NumberUtils)
- (BOOL)isNumeric; 
@end

@implementation NSString (NumberUtils) 
- (BOOL)isNumeric
{
    NSScanner *scanner = [NSScanner scannerWithString:self];
    return [scanner scanFloat:NULL]? [scanner isAtEnd]: NO;
}
@end
</code></pre>

<p>我们也可以Category中定义新的数据成员，但是不能够对它们使用synthesize。这是因为一个类的结构已经在编译器决定了，而Category是在运行期定义生成的，这样就没有办法改变类结构体中的ivars。</p>

<pre><code>struct objc_class {  
    Class isa  OBJC_ISA_AVAILABILITY;  

    #if !__OBJC2__  
    Class super_class                                        OBJC2_UNAVAILABLE;  
    const charchar *name                                     OBJC2_UNAVAILABLE;  
    long version                                             OBJC2_UNAVAILABLE;  
    long info                                                OBJC2_UNAVAILABLE;  
    long instance_size                                       OBJC2_UNAVAILABLE;  
    struct objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;  
    struct objc_method_list **methodLists                    OBJC2_UNAVAILABLE;  
    struct objc_cache *cache                                 OBJC2_UNAVAILABLE;  
    struct objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;  
#endif  

} OBJC2_UNAVAILABLE;    
</code></pre>

<p>可以向下面这样定义：</p>

<pre><code>@interface NSString (NumberUtils)
@property (nonatomic, readonly, getter=isNumeric) BOOL numeric;
@end
</code></pre>

<p>如果我们想为一个类真正添加一个数据成员，要怎么办呢？当然你可能会想到使用修饰者，封装出一个对象，包含这个类和想要添加的数据成员。但是那样要麻烦一些。</p>

<h2>使用Associated Objects为一个分类添加数据成员</h2>

<p>使用Runtime来解决这个问题。要使用的API：</p>

<pre><code> // 使用一个key值和关联策略来为一个对象设置一个关联的值
void objc_setAssociatedObject(id object, const void *key, id value, objc_AssociationPolicy policy);
</code></pre>

<p><code>objc_setAssociatedObject</code>：使用一个key值和关联策略来为一个对象设置一个关联的值。类似NSDictionry，一个key值，对应一个value值。</p>

<p>key值必须是进程的生命周期内一个唯一、不变的id值。可以使用一个NSString对象作为一个key值。但是如果试图通过一个相同的字符串值，但是不同内存地址作为key值，可能不会获得预期的结果。一个更好的选择是定义一个static的指针作为key值。</p>

<p>下面一个例子：</p>

<pre><code>@interface UIImage (Tagged)
@property (nonatomic, copy) NSString *tag;
@end    

#import &lt;objc/runtime.h&gt; 

static const void *ImageTagKey = &amp;ImageTagKey;
@implementation UIImage (Tagged)

- (void)setTag:(NSSting *)tag
{
    objc_setAssociatedObject(self, ImageTagKey, tag, OBJC_ASSOCIATION_COPY_NONATOMIC);
}

- (NSString *)tag
{
    return objc_getAssociatedObject(self, ImageTagKey);
}
@end
</code></pre>

<p>这个例子中有一点点需要主要：</p>

<ul>
<li>key值使用一个指针类型static const void * 。我们必须让这个指针初始化，否则它的值就会为NULL，但是我们不关心具体指向什么，只要它是唯一的，不变的。这里面，指针指向了自己，一个唯一、不变的值。</li>
</ul>


<p>参考文章：</p>

<p><a href="https://developer.apple.com/library/ios/documentation/cocoa/reference/ObjCRuntimeRef/Reference/reference.html#//apple_ref/doc/constant_group/Associative_Object_Behaviors">Objective-C Runtime Reference</a></p>

<p><a href="http://iosdevelopertips.com/objective-c/adding-properties-category-using-associated-objects.html">Adding Properties to a Category Using Associated Objects</a></p>

<p><a href="http://nshipster.com/associated-objects/">Associated Objects</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactiveCocoa简介]]></title>
    <link href="http://Hydra2050.github.io/blog/2014/01/12/reactivecocoajian-jie/"/>
    <updated>2014-01-12T22:40:40+08:00</updated>
    <id>http://Hydra2050.github.io/blog/2014/01/12/reactivecocoajian-jie</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013年读过的好书]]></title>
    <link href="http://Hydra2050.github.io/blog/2014/01/12/2013nian-du-guo-de-hao-shu/"/>
    <updated>2014-01-12T16:45:59+08:00</updated>
    <id>http://Hydra2050.github.io/blog/2014/01/12/2013nian-du-guo-de-hao-shu</id>
    <content type="html"><![CDATA[<h2>技术类书籍</h2>

<p>首先时技术类书籍：</p>

<ul>
<li>《从小工到专家——程序员修炼之道》：</li>
<li>《Head First 设计模式》：</li>
<li>《iOS 高级编程》：</li>
<li>《Python》：</li>
<li>《STL源码剖析》：</li>
</ul>


<h2>非技术类书籍</h2>

<p>非技术类：</p>

<ul>
<li>《一个人的村庄》：</li>
<li>《1984》：</li>
<li>《少有人走的路：》：</li>
<li>《自由在高处》：</li>
<li>《九种孤独》：</li>
<li>《天才在左，疯子在右》：</li>
<li>《猎命师传奇：卷二十》：</li>
<li>《上帝掷骰子吗》：</li>
<li>《沉默的大多数》：</li>
<li>《变身》、《新参者》：</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP的缓存机制]]></title>
    <link href="http://Hydra2050.github.io/blog/2014/01/12/http-cache/"/>
    <updated>2014-01-12T13:56:24+08:00</updated>
    <id>http://Hydra2050.github.io/blog/2014/01/12/http-cache</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>HTTP的缓存机制，主要体现在HTTP协议头里面的几个字段——Expires、Cache-control、Last-Modified/If-Modified-Since、Etag/If-None-Match等。在移动开发中，了解HTTP的缓存对开发者来说已经必不可少。</p>

<p><img src="http://Hydra2050.github.io/images/2014011216.png" alt="HTTP HEAD" /></p>

<h2>Expires</h2>

<p>HTTP头中的Expires字段，告诉浏览器在Expires显示的时间前，浏览器可以从缓存中读取，而不需要再次去请求。</p>

<h2>Cache-control</h2>

<p>Cache-control与Expires一样，都是告诉浏览器有效期。不过它不只是设置过期时间，还可以设置很多选项：</p>

<ul>
<li>no-cache指示请求或响应消息不能缓存</li>
<li>no-store用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。</li>
<li>max-age指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应。</li>
<li>min-fresh指示客户机可以接收响应时间小于当前时间加上指定时间的响应。</li>
<li>max-stale指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。</li>
</ul>


<p>如上图：max-age＝600，表示600s内不需要重新请求。</p>

<h2>Last-Modified</h2>

<p><code>Last-Modified</code>：资源的最后修改时间。</p>

<p>如果本地缓存已经过期，即超过了<code>max-age</code>的缓存时间，缓存的HTTP头中存在Last-Modified，则向服务器发送带有If-Modified-Since字段的请求，后面带上<code>Last-Modified</code>所记录的最后修改时间。</p>

<p>服务器收到带有<code>If-Modified-Since</code>的HTTP请求，会将请求的资源修改时间与<code>If-Modified-Since</code>时间对比：如果这段时间没有被修改过，则返回304，告诉浏览器可以继续使用本地缓存；如果资源已经修改过了，则响应请求的资源数据，返回200 OK.</p>

<h2>Etag</h2>

<p><code>Etag</code>：服务器应答数据的时候，生成的当前资源的唯一标识。</p>

<p>如果本地缓存已经过期，即超过了<code>max-age</code>的缓存时间，缓存的HTTP头中存在<code>Etag</code>，则向服务器发送带有<code>If-None-Match</code>字段的请求，后面带上<code>Etag</code>所记录的当前资源的唯一标识。</p>

<p>服务器收到带有<code>If-None-Match</code>的HTTP请求，会将请求的资源唯一标识与<code>If-None-Match</code>的标签的标识对比：如果这段时间没有被修改过，则返回304，告诉浏览器可以继续使用本地缓存；如果资源已经修改过了，则响应请求的资源数据，返回200 OK。</p>

<h2>Etag与Last-Modified的区别？</h2>

<p>HTTP1.1中Etag的出现主要是为了解决几个Last-Modified比较难解决的问题：</p>

<ul>
<li>Last-Modified标注的最后修改只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，它将不能准确标注文件的修改时间</li>
<li>如果某些文件会被定期生成，当有时内容并没有任何变化，但Last-Modified却改变了，导致文件没法使用缓存</li>
<li>有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形</li>
</ul>


<p><code>Etag</code>是服务器生成的对应资源的唯一标识符，能够更加准确的控制缓存。<code>Last-Modified</code>与<code>ETag</code>是可以一起使用的，服务器会优先验证<code>ETag</code>，一致的情况下，才会继续比对<code>Last-Modified</code>。</p>

<h2>跳转、刷新、强制刷新</h2>

<p>浏览器缓存行为还有用户的行为有关:</p>

<table>
<thead>
<tr>
<th>用户操作      </th>
<th align="center"> Expires/Cache-control </th>
<th align="center"> Last-Moified/Etag</th>
</tr>
</thead>
<tbody>
<tr>
<td>地址栏回车     </td>
<td align="center"> 有效                  </td>
<td align="center"> 有效</td>
</tr>
<tr>
<td>页面链接跳转   </td>
<td align="center"> 有效                  </td>
<td align="center"> 有效  </td>
</tr>
<tr>
<td>新开窗口      </td>
<td align="center"> 有效                  </td>
<td align="center"> 有效</td>
</tr>
<tr>
<td>前进、后退     </td>
<td align="center"> 有效                  </td>
<td align="center"> 有效 </td>
</tr>
<tr>
<td>F5刷新        </td>
<td align="center"> 无效                  </td>
<td align="center"> 有效</td>
</tr>
<tr>
<td>Ctrl＋F5刷新  </td>
<td align="center"> 无效                  </td>
<td align="center"> 无效 </td>
</tr>
</tbody>
</table>


<h2>总结</h2>

<p>当本地存在缓存的时候，一次请求的流程：</p>

<p><img src="http://Hydra2050.github.io/images/HTTPCache.png" alt="HTTP Cache" /></p>

<p>参考：<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9">Cache-Control section of RFC 2616</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object-C高级编程学习笔记(三)]]></title>
    <link href="http://Hydra2050.github.io/blog/2013/12/29/object-cgao-ji-bian-cheng-xue-xi-san/"/>
    <updated>2013-12-29T18:56:57+08:00</updated>
    <id>http://Hydra2050.github.io/blog/2013/12/29/object-cgao-ji-bian-cheng-xue-xi-san</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object-C高级编程学习笔记(二)]]></title>
    <link href="http://Hydra2050.github.io/blog/2013/12/22/object-cgao-ji-bian-cheng-xue-xi-2/"/>
    <updated>2013-12-22T20:48:19+08:00</updated>
    <id>http://Hydra2050.github.io/blog/2013/12/22/object-cgao-ji-bian-cheng-xue-xi-2</id>
    <content type="html"><![CDATA[<h1>Blocks</h1>

<h2>What is blocks</h2>

<h3>Block语法</h3>

<p>Blocks是C语言的扩充功能：带有自动变量（局部变量）的匿名函数。</p>

<p><code>^</code> <code>返回值类型</code> <code>参数列表</code> <code>表达式</code></p>

<pre><code>^int (int count) {return count + 1;}
</code></pre>

<p>Block语法可以省略几个项目。首先是返回值类型：</p>

<pre><code>^(int count) {return count + 1;}
</code></pre>

<p>其次，如果不使用参数，参数列表可以省略：</p>

<pre><code>^{ print(“Block\n”);}
</code></pre>

<p>使用Block语法讲Block赋值为Block类型变量：</p>

<pre><code>int(^blk) (int) = ^(int count) {return count + 1;}
int(^blk1) (int) = blk;
</code></pre>

<p>使用typedef定义：</p>

<pre><code>typedef int (^blk_t) (int);
blk_t blk = ^(int count) {return count + 1;}
int nResult = blk(10);
</code></pre>

<p>Block类型变量可以像C语言中其他类型变量一样使用。</p>

<h3>截获自动变量值</h3>

<p>Blocks中，Block表达式截获所使用的自动变量的值。因为Block表达式保存了自动变量的值，所以在执行Block语法后，即使改写Block中使用的自动变量的值也不会影响Block执行时自动变量的值。</p>

<pre><code>int a = 10;
int b = 10;
int (^blk) (void) = ^(return a + b;);
b = 2;
blk();
</code></pre>

<p>执行结果为：<code>20</code></p>

<h3>__block说明符</h3>

<p>若想在Block语法的表达式中将值赋给Block语法外的自动变量，需要在自动变量附加<strong>block说明符，该变量成为</strong>block变量。</p>

<pre><code>__block int val = 0;
void(^blk) (void) = ^{val = 1;};
blk();
printf("%d",val);
</code></pre>

<p>执行结果为： <code>1</code></p>

<p>赋值给截获的自动变量会产生编译错误：</p>

<pre><code>id array = [[NSMutableArray alloc] init];
void (^blk) {array = [[NSMutableArray alloc] init]};
</code></pre>

<p>会出现编译错误。</p>

<p>另外，在使用C语言数组时，必须小心使用起指针。</p>

<pre><code>const char text[] = "Hello";
void (^blk) (void) = ^{
    printf("%c\n",text[2]);
};
</code></pre>

<p>在现在的Block中，截获自动变量的方法并没有实现对C语言数组的截获，因此会编译出错。可以使用指针解决：</p>

<pre><code>const char *text = "Hello";
void (^blk) (void) = ^{
    printf("%c\n",text[2]);
};  
</code></pre>

<h2>Blocks的实现</h2>

<p>// TODO:需要一些时间理解</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object-C高级编程学习笔记(一)]]></title>
    <link href="http://Hydra2050.github.io/blog/2013/12/22/object-cgao-ji-bian-cheng/"/>
    <updated>2013-12-22T14:28:55+08:00</updated>
    <id>http://Hydra2050.github.io/blog/2013/12/22/object-cgao-ji-bian-cheng</id>
    <content type="html"><![CDATA[<p>书名：《Object-C高级编程 IOS与OS X多线程和内存管理》</p>

<h2>ARC</h2>

<p>在Object-C中采用Automatic Reference Counting(ARC)机制，让编译器来进行内存管理。</p>

<ol>
<li>使用Xcode4.2或以上版本</li>
<li>使用LLVM编译器3.0或以上版本</li>
<li>编译器选项中设置ARC为有效</li>
</ol>


<h3>所有权修饰符</h3>

<ul>
<li>__strong修饰符</li>
<li>__weak修饰符</li>
<li>__unsafe_unretained修饰符</li>
<li>__autoreleasing修饰符</li>
</ul>


<h4>1. __strong修饰符</h4>

<p>__strong修饰符为id类型和对象类型默认的所有权修饰符,可以省略。</p>

<pre><code>id __strong obj = [[NSObject alloc] init];
</code></pre>

<h4>2. __weak修饰符</h4>

<p>如果只用__strong修饰符，自动引用计数式内容管理必然会发生“循环引用”的问题。</p>

<p>__weak提供弱引用，弱引用不能持有对象实例，可以解决“循环引用”的问题。</p>

<p>下面这段代码：</p>

<pre><code>id __weak obj = [[NSObject alloc] init];
NSLog(@"%@",obj);
</code></pre>

<p>会输出 nil 。因为__weak修饰的obj持用弱引用，在赋值过后，并没有对象强引用它，生成的对象会立即释放。这样obj自动赋值为nil。</p>

<p>再来看看下面这段代码的输出：</p>

<pre><code>id __weak obj0 = nil;
{
    id __strong obj1 = [[NSObject alloc] init];
    obj0 = obj1;
    NSLog(@"%@",obj0);
}
NSLog(@"%@",obj0);
</code></pre>

<p>结果：</p>

<pre><code>&lt;NSObject: 0x109420000&gt;
nil
</code></pre>

<p>注：<strong>weak修饰符只能用于IOS5以上以及OS X Lion以上版本的应用程序。在它们一下的程序可使用</strong>unsafe_unretained修饰符来代替。</p>

<h4>3. __unsafe_unretained修饰符</h4>

<p><strong>unsafe_unretained修饰符，是不安全的所有权修饰符。有</strong>unsafe_unretained修饰符的变量不属于编译器的内存管理对象。</p>

<pre><code>id __unsafe_unretained obj = [[NSObject alloc] init];
NSLog(@"%@",obj);
</code></pre>

<p>这里和__weak一样，会输出<code>nil</code>。难道这两个修饰符相同吗？再来看第二个例子：</p>

<pre><code>id __unsafe_unretained obj0 = nil;
{
    id __strong obj1 = [[NSObject alloc] init];
    obj0 = obj1;
    NSLog(@"%@",obj0);
}
NSLog(@"%@",obj0);
</code></pre>

<p>输出：</p>

<pre><code>&lt;NSObject: 0x10972ced0&gt;
&lt;NSObject: 0x10972ced0&gt;
</code></pre>

<p>可以看到结果已经和__weak不同。</p>

<p>这里在第二次打印的时候，obj0已经成为一个野指针。</p>

<p><strong>weak与</strong>unsafe_unretained的区别可以简单地说：</p>

<p>当弱引用的对象被释放，<strong>weak修饰的对象会自动赋值为nil；而</strong>unsafe_unretained修饰的对象不会。</p>

<h4>4. __autoreleasing修饰符</h4>

<p>在ARC有效的时候，不能使用NSAutoreleasePool。为了实现想非ARC工程的NSAutoreleasePool该怎么办？使用__autoreleasing修饰符。</p>

<p>一下两段代码效果相同：</p>

<pre><code>/* NO ARC */
NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
id obj = [[NSObject alloc] init];
[obj autorelease];
[pool drain];

/*  ARC  */
@autoreleasepool {
    id __autoreleasing obj = [[NSObject alloc] init];
}
</code></pre>

<p>但是，显式地附加<strong>autoreleasing修饰符同显式地附加</strong>strong一样罕见。一般不必显示地添加__autoreleasing修饰符。</p>

<p style="color:red"> 另外，无论ARC是否有效，调试用的私有方法_objc_autoreleasePoolPrint()都可以使用。利用这个函数可以有效地帮助我们调试注册到autoreleasepool上的对象。 </p>


<h3>ARC的规则</h3>

<p>1. 不能使用retain/release/retainCount/autorelease</p>

<p>2. 不能使用NSAllocateObject/NSDeallocateObject</p>

<p>3. 遵守内存管理的方法命名规则</p>

<p>4. 不要显示调用dealloc</p>

<p>5. 使用@autoreleasepool快代替NSAutoreleasePool</p>

<p>6. 不能使用NSZone</p>

<p>7. 对象型变量不能作为C语言结构体的成员</p>

<p>要把对象型变量加入到结构体成员，可强制转换为void* 或是添加<code>__unsafe_unretained</code>修饰符。</p>

<h4>显示转换id 和 void*</h4>

<p>下面这段代码，在ARC下会编译错误：</p>

<pre><code>id obj = [[NSObject alloc] init];
void* p = obj;
</code></pre>

<p>需要使用“__bridge转换”：</p>

<p>1、 __bridge</p>

<pre><code>/* ARC */
id obj1 = [[NSObject alloc] init];
void* p = (__bridge void*)obj1;
</code></pre>

<p>相当于：</p>

<pre><code>/* NO ARC */
id obj = [[NSObject alloc] init];
void* p = obj;
</code></pre>

<p>但是使用<strong>bridge转换，其安全性与赋值</strong>unsafe_unretained修饰符相似，甚至更低。</p>

<p>2、 __bridge_retained</p>

<pre><code>/* ARC */
id obj1 = [[NSObject alloc] init];
void* p = (__bridge_retained void*)obj1;
</code></pre>

<p>相当于：</p>

<pre><code>/* NO ARC */
id obj1 = [[NSObject alloc] init];
void* p = obj1;
[(id)p retain];
</code></pre>

<p>下面的代码：</p>

<pre><code>void* p = 0;
{
    id obj1 = [[NSObject alloc] init];
    void* p = (__bridge_retained void*)obj1;
}
NSLog(@"%@",p);
</code></pre>

<p>由于使用__bridge_retained，p在对后持有该对象，所以会打印出该对象。</p>

<p>3、 __bridge_transfer</p>

<pre><code>/* ARC */
id obj1 = [[NSObject alloc] init];
void* p = (__bridge_transfer void*)obj1;
</code></pre>

<p>相当于：</p>

<pre><code>id obj1 = [[NSObject alloc] init];
void* p = obj1;
[(id)p retain];
[obj1 release];
</code></pre>

<p>当然可是实现双向的转换。这些转换多数使用在Objec-C对象和Core Foundation对象之间的互相转换。</p>

<p>以下两个函数为系统提供的方法，实现Toll-Free Bridging：</p>

<pre><code>NS_INLINE id CFBridgingRelease(CFTypeRef CF_CONSUMED X) {
return (__bridge_transfer id)X;
}
NS_INLINE CF_RETURNS_RETAINED CFTypeRef CFBridgingRetain(id X) {
return (__bridge_retained CFTypeRef)X;
}
</code></pre>

<p><a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaEncyclopedia/Toll-FreeBridgin/Toll-FreeBridgin.html">Toll-Free Bridging</a></p>

<h3>属性</h3>

<p>ARC中，属性声明的属性与所有权修饰符的关系</p>

<table>
<thead>
<tr>
<th align="center">   属性声明   </th>
<th align="center"> 所有权修饰符           </th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">assign           </td>
<td align="center"> __unsafe_unretained  </td>
</tr>
<tr>
<td align="center">copy             </td>
<td align="center"> __strong(复制对象)    </td>
</tr>
<tr>
<td align="center">retain           </td>
<td align="center"> __strong             </td>
</tr>
<tr>
<td align="center">strong           </td>
<td align="center"> __strong             </td>
</tr>
<tr>
<td align="center">unsafe_unretained</td>
<td align="center"> __unsafe_unretained </td>
</tr>
<tr>
<td align="center">weak             </td>
<td align="center"> __weak               </td>
</tr>
</tbody>
</table>


<p style="color:red">有一种情况不能使用__weak修饰符：</p>


<p></p>

<pre><code>- (BOOL)allowsWeakReference UNAVAILABLE_ATTRIBUTE;
- (BOOL)retainWeakReference UNAVAILABLE_ATTRIBUTE;
</code></pre>

<p>如果NSobject实例上面的两个方法返回NO，绝对不能使用__weak修饰符。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS7 New Feature: iBeacon]]></title>
    <link href="http://Hydra2050.github.io/blog/2013/12/21/ios7-new-feature-ibeacon/"/>
    <updated>2013-12-21T18:32:32+08:00</updated>
    <id>http://Hydra2050.github.io/blog/2013/12/21/ios7-new-feature-ibeacon</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>iBeacon作为IOS7的一项新特性，在今年的WWDC大会上正式正式发布。虽然官方对它的描述并不多，WWDC的视频中也没有一个是讲解iBeacon的，但是在WWDC2013的Keynote上还是看到了它的身影。</p>

<p><img src="http://Hydra2050.github.io/images/201312211904.jpeg" alt="WWDC2013 Keynote" /></p>

<p>iBeacon也是我今年WWDC上最喜欢的新特性之一，因为我一直认为更便捷、去中心化的沟通才是未来。在IOS7推出Beta版的时候，我也曾经实践过新推出的Nearby Networking With Multipeer Connectivity。但是相比之下，iBeacon要优秀很多。</p>

<p>目前有不少硬件厂商在生产基于iBeacon的基站，Estimote很早就推出了Estimote Beacons，利用苹果的iBeacon技术，实现Distance、Proximity和Notification三种功能。如果想体验一下，可以在Appstore搜索下载应用Estimote。同时Estimote Beacons提供了一套API，可以方便地进行编程。</p>

<p><a href="https://github.com/Estimote/iOS-SDK">Estimote Beacons的API地址</a></p>

<p><img src="http://Hydra2050.github.io/images/201312211906.jpeg" alt="Estimote Beacons" /></p>

<h2>What is iBeacon?</h2>

<p>iBeacon通过使用低功耗蓝牙技术（Bluetooth Low Energy，也就是通常所说的Bluetooth 4.0或者Bluetooth Smart），可以创建一个信号区域，当设备进入该区域时，相应的应用程序便会提示用户是否需要接入这个信号网络。通过能够放置在任何物体中的小型无线传感器和低功耗蓝牙技术，用户便能使用iPhone来传输数据。</p>

<p><img src="http://Hydra2050.github.io/images/201312211907.jpeg" alt="iBeacon" /></p>

<h2>什么是低功耗蓝牙技术？</h2>

<p>低功耗蓝牙技术的最大特点便在于低功耗，从而能使设备拥有更长的续航时间。不过低功耗蓝牙技术仅支持较低的文件传输速率，因此可以用于可穿戴式智能设备之间的信息传送，但却不能完成像传输音频这样的任务。</p>

<h2>一个简单的Demo</h2>

<p><a href="https://github.com/Hydra2050/BeaconDemo">Demo下载地址</a></p>

<h3>Start a BeaconBroadcast</h3>

<p>1、 创建一个BeaconRegion，作为Beacon基站的广播的Region对象。其中UUID为Beacon基站的唯一标识。</p>

<pre><code>NSUUID* myUUID = [[NSUUID alloc] initWithUUIDString:@"E621E1F8-C36C-495A-93FC-0C247A3E6E5D"];
self.targetBeaconRegion = [[CLBeaconRegion alloc] initWithProximityUUID:myUUID identifier:@"My Beacon Demo 20131221"];
</code></pre>

<p>2、 创建一个CBPeripheralManager对象</p>

<pre><code> self.peripheraManager = [[CBPeripheralManager alloc] initWithDelegate:self queue:nil options:nil];
</code></pre>

<p>3、 开始广播</p>

<pre><code>NSDictionary* peripheraData = [self.boardcastBeaconRegion peripheralDataWithMeasuredPower:nil];
[self.peripheraManager startAdvertising:peripheraData];
</code></pre>

<p>开始广播后，可以处理一下回调函数，如：</p>

<pre><code>- (void)peripheralManagerDidUpdateState:(CBPeripheralManager *)peripheral
- (void)peripheralManagerDidStartAdvertising:(CBPeripheralManager *)peripheral error:(NSError *)error
</code></pre>

<h3>Start a BeaconMonitor</h3>

<p>1、 创建一个BeaconRegion，作为搜索的Region对象。其中UUID为Beacon基站的唯一标识。</p>

<pre><code>NSUUID* myUUID = [[NSUUID alloc] initWithUUIDString:@"E621E1F8-C36C-495A-93FC-0C247A3E6E5D"];
self.targetBeaconRegion = [[CLBeaconRegion alloc] initWithProximityUUID:myUUID identifier:@"My Beacon Demo 20131221"];
</code></pre>

<p>2、 创建一个CLLocationManager对象</p>

<pre><code>self.locationManager = [[CLLocationManager alloc] init];
self.locationManager.delegate = self;
</code></pre>

<p>3、 开始搜索Beacon基站</p>

<pre><code>[self.locationManager startRangingBeaconsInRegion:self.targetBeaconRegion];
</code></pre>

<p>接下来可以处理一下回调函数，如：</p>

<pre><code>- (void)locationManager:(CLLocationManager *)manager
    didRangeBeacons:(NSArray *)beacons inRegion:(CLBeaconRegion *)region
- (void)locationManager:(CLLocationManager *)manager
 didUpdateLocations:(NSArray *)locations
- (void)locationManager:(CLLocationManager *)manager
     didEnterRegion:(CLRegion *)region
- (void)locationManager:(CLLocationManager *)manager
      didExitRegion:(CLRegion *)region
- (void)locationManager:(CLLocationManager *)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status
</code></pre>

<p>效果图：</p>

<p><img src="http://Hydra2050.github.io/images/201312211958.PNG" alt="CLProximityImmediate" /></p>

<p><img src="http://Hydra2050.github.io/images/201312211959.PNG" alt="CLProximityNear" /></p>

<p><img src="http://Hydra2050.github.io/images/201312212001.PNG" alt="CLProximityFar" /></p>

<p><img src="http://Hydra2050.github.io/images/201312212002.PNG" alt="CLProximityUnknown" /></p>

<p><img src="http://Hydra2050.github.io/images/201312212003.PNG" alt="didExitRegion" /></p>

<h2>总结</h2>

<p>通过Demo，可以对iBeacon有一个简单的了解。iBeacon可以方便实现室内导航、商品消息推送、支付等功能。网上很多文章认为iBeacon会成为NFC杀手。到底iBeacon能发展到什么地步，让我们拭目以待吧。</p>

<p><a href="http://support.apple.com/kb/HT6048">iOS: Understanding iBeacon</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS7 new feature: TextKit]]></title>
    <link href="http://Hydra2050.github.io/blog/2013/12/14/ios7-new-feature-textkit/"/>
    <updated>2013-12-14T20:41:36+08:00</updated>
    <id>http://Hydra2050.github.io/blog/2013/12/14/ios7-new-feature-textkit</id>
    <content type="html"><![CDATA[<h2>引子</h2>

<p>今年的WWDC大会上，苹果推出了IOS7,UI上有了很大变化，向扁平化发展；在新的SDK中，新的特性、新的功能无疑给开发者带来了更大的惊喜。其中最感兴趣的主要有三点,今天的主角TextKit就是其中之一。</p>

<p><img src="http://Hydra2050.github.io/images/20131215-1.png" alt="TextKit" /></p>

<h2>What is Text Kit?</h2>

<ol>
<li>快速现代化的文本布局和渲染引擎</li>
<li>基于core text，拥有core text的所有功能和灵活性，而不需要使用不易用的API（CF type）</li>
<li>完美地集成在UIKit中</li>
</ol>


<p>下图是IOS6中的类结构图：</p>

<p><img src="http://Hydra2050.github.io/images/20131215-3.png" alt="Structure in IOS6" /></p>

<p>下图是IOS7中的类结构图：</p>

<p><img src="http://Hydra2050.github.io/images/20131215-2.png" alt="Structure in IOS7" /></p>

<p>可以看出，iOS7之前，几乎所有的文本和UIWebview都是WebKit来处理的，由它来布局和渲染。在IOS7中，UIWebview还是由WebKit作为排版和渲染引擎，但是文本都由TextKit来处理，TextKit又是基于CoreText之上，这是一个很大的改动。</p>

<h2>TextKit结构设计</h2>

<p>TextKit的设计符合模型-视图-控制器（MVC）架构：</p>

<p><img src="http://Hydra2050.github.io/images/20131217-1.png" alt="TextKit结构设计" /></p>

<p><em>NSTextStorage</em>：MVC中的模型，用于存储需要显示的文本内容以及他们的属性。它继承自NSMutableAttributedString。当内容变化时，会通知NSLayoutManager；</p>

<p><em>NSTextContainer</em>：MVC中的视图。每个文本视图都有一个文本容器，用来定义了一个文本可以绘制的区域，即NSTextContainer。</p>

<p><em>UITextView</em>：实际中的文本视图组件，每一文本视图都有一个文本容器，即NSTextContainer。</p>

<p><em>NSLayoutManager</em>：MVC中的控制器，用来管理文本的显示：</p>

<ol>
<li>这个管理器监听NSTextStorage中文本或属性改变的通知，一旦接收到通知就触发布局进程;</li>
<li>从NSTextStorage提供的文本开始，它将所有的字符翻译为字形（Glyph);</li>
<li>一旦字形全部生成，这个管理器向它的文本容器（们）查询文本可用以绘制的区域;</li>
<li>然后这些区域被行逐步填充，而行又被字形逐步填充。一旦一行填充完毕，下一行开始填充;</li>
<li>对于每一行，布局管理器必须考虑断行行为（放不下的单词必须移到下一行）、连字符、内联的图像附件等等;</li>
<li>当布局完成，文本的当前显示状态被设为无效，然后文本管理器将前面几步排版好的文本设给文本视图。</li>
</ol>


<h2>Text Layout</h2>

<p>什么是TextLayout？</p>

<pre><code>TextLayout ＝ Glyph ＋ Location
Glyph = Font + String
</code></pre>

<p>什么是Glyph？</p>

<p><img src="http://Hydra2050.github.io/images/20131217-2.png" alt="Glyph" /></p>

<ol>
<li>字符的图形表示（A Graphical Representation of Characters）。</li>
<li>Character + font &ndash;> glyph</li>
<li>图形系统的Glyph IDs: CGGlyph</li>
</ol>


<p>有了TextLayout可以实现的功能：</p>

<p>1.字距调整（Kerning）</p>

<p><img src="http://Hydra2050.github.io/images/20131217-3.png" alt="Kerning" /></p>

<p>2.连写</p>

<p><img src="http://Hydra2050.github.io/images/20131217-4.png" alt="Ligature" /></p>

<p>3.断字</p>

<p><img src="http://Hydra2050.github.io/images/20131217-5.png" alt="Break" /></p>

<p>4.隐藏文字</p>

<p><img src="http://Hydra2050.github.io/images/20131217-6.png" alt="Truncation" /></p>

<p>5.更加完美的排版</p>

<h2>DEMO演示</h2>

<p>下载地址：<a href="https://github.com/Hydra2050/TextKitDemo">Demo地址</a></p>

<h4>Demo1:BaseInteraction</h4>

<p>对文本内容进行基本的检测，包括地址、电话、URl等。</p>

<pre><code>-(BOOL) textView:(UITextView *)textView shouldInteractWithURL:(NSURL *)URL inRange:(NSRange)characterRange
{
    //...
}
</code></pre>

<p>通过回调函数，对URL的点击进行处理。</p>

<p><img src="http://Hydra2050.github.io/images/20131217-7.png" alt="BaseInteraction" /></p>

<h4>Demo2:ExclusionPaths</h4>

<p>为TextView中的文字设置ExclusionPaths，即设置一个不可填充文本的区域。</p>

<pre><code>- (UIBezierPath *)translatedBezierPath
{
    static dispatch_once_t onceToken;
    dispatch_once(&amp;onceToken, ^{
        //从预先设置好的plist中读取
        _originalButterflyPath = [NSKeyedUnarchiver unarchiveObjectWithFile:[[NSBundle mainBundle] pathForResource:@"butterflyPath" ofType:@"plist"]];
    });

    CGRect butterflyImageRect = [self.textView convertRect:self.imageView.frame fromView:self.view];
    UIBezierPath *newButterflyPath = [self.originalButterflyPath copy];
    [newButterflyPath applyTransform:CGAffineTransformMakeTranslation(butterflyImageRect.origin.x, butterflyImageRect.origin.y)];

    return newButterflyPath;
}

- (void)viewDidLayoutSubviews
{
    [super viewDidLayoutSubviews];

    self.textView.textContainer.exclusionPaths = @[[self translatedBezierPath]];
}
</code></pre>

<p><img src="http://Hydra2050.github.io/images/20131217-8.png" alt="ExclusionPaths" /></p>

<h4>Demo3:TextColoring</h4>

<p>实现对文本特殊字段的高亮处理，对URL类型字符串添加边框等。</p>

<pre><code>self.textStorage = [[TextColoringTextStorage alloc] init];
OutliningLayoutManager* layoutManager = [[OutliningLayoutManager alloc] init];
NSTextContainer* textContainer = [[NSTextContainer alloc] initWithSize:CGSizeMake(self.view.frame.size.width, CGFLOAT_MAX)];
[layoutManager addTextContainer:textContainer];
[self.textStorage addLayoutManager:layoutManager];

UITextView* textView = [[UITextView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height) textContainer:textContainer];
[self.view addSubview:textView];

//设置需要处理的文本片段
self.textStorage.tokens = @{ @"Alice" : @{ NSForegroundColorAttributeName : [UIColor redColor] },
                             @"once" : @{ NSForegroundColorAttributeName : [UIColor greenColor] },
                             TKDDefaultTokenName : @{ NSForegroundColorAttributeName : [UIColor blackColor],NSFontAttributeName:[UIFont fontWithName:@"Helvetica" size:18.] } };
</code></pre>

<p><img src="http://Hydra2050.github.io/images/20131217-9.png" alt="TextColoring" /></p>

<h3>Demo4:FontType</h3>

<p>UIFontDescriptor的简单使用。</p>

<pre><code>UIFontDescriptor* fontDescriptor = [UIFontDescriptor preferredFontDescriptorWithTextStyle:UIFontTextStyleBody];
UIFontDescriptor* boldFontDescriptor = [fontDescriptor fontDescriptorWithSymbolicTraits:UIFontDescriptorTraitBold];
UIFont* boldFont = [UIFont fontWithDescriptor:boldFontDescriptor size:0.0];
</code></pre>

<h2>总结</h2>

<p>通过几个例子，TextKit已经初步展示了它强大的处理能力，但这只是冰山一角。在WWDC的视频中关于自动布局、更加精细的排版方面例子，Demo中并没有实现。</p>

<p>参考资料：</p>

<p>WWDC2013视频：
<a href="https://developer.apple.com/wwdc/videos/">https://developer.apple.com/wwdc/videos/</a></p>

<p>Session 210: Introducing Text Kit</p>

<p>Session 223: Using Fonts with Text Kit</p>

<p>Session 220: Advanced Text Layouts and Effects with Text Kit</p>

<p>WWDC 2013 sample code:
<a href="https://developer.apple.com/downloads/index.action?name=WWDC%202013">https://developer.apple.com/downloads/index.action?name=WWDC%202013</a></p>

<p>objc.io原文地址：
<a href="http://www.objc.io/issue-5/getting-to-know-textkit.html">http://www.objc.io/issue-5/getting-to-know-textkit.html</a></p>

<p>译文地址：
<a href="http://blog.jobbole.com/5196">http://blog.jobbole.com/5196</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为IOS应用添加字体]]></title>
    <link href="http://Hydra2050.github.io/blog/2013/12/14/ios-font/"/>
    <updated>2013-12-14T16:42:10+08:00</updated>
    <id>http://Hydra2050.github.io/blog/2013/12/14/ios-font</id>
    <content type="html"><![CDATA[<h2>引子</h2>

<p>ios6中默认提供了大概200种字体，有时为了让应用中的文字更好看，希望能有其他的字体可以选择。今天主要来介绍一下如何为IOS应用添加字体。</p>

<h2>方法一、将字体包打包到工程</h2>

<p>步骤如下：</p>

<h3>1.下载字体包</h3>

<p>在网上搜索字体包，可以找到很多资源，我下载了一个名字叫 DIN-Medium.otf 的字体包。（有一些特殊的字体可能涉及到版权的问题，所以在使用之前要确认清楚。）</p>

<h3>2.将字体包添加到工程</h3>

<p>将字体包添加到工程</p>

<p><img src="http://Hydra2050.github.io/images/fontexample.png" alt="添加字体包" /></p>

<p style="color:red">注：如果不选 Show Raw Keys/Values，需要添加的Key值为 Fonts provided by application </p>


<h3>3.修改plist文件</h3>

<p>在工程的plist文件中添加key值为UIAppFonts：</p>

<p><img src="http://Hydra2050.github.io/images/201312141752.png" alt="添加键值" /></p>

<p>这样就可以使用我们新加的字体了。</p>

<p><img src="http://Hydra2050.github.io/images/201312141754.png" alt="使用新增字体" /></p>

<p>效果图：</p>

<p><img src="http://Hydra2050.github.io/images/201312141757.png" alt="效果图" /></p>

<h2>方法二、动态下载字体库</h2>

<p>在IOS6之后，苹果支持动态字体库下载。这样的好处可以不必增加程序包大小，不过下载的字体只能从官方支持的列表中选择：</p>

<p><a href="http://support.apple.com/kb/HT5484">iOS 6: Font list</a></p>

<p><a href="http://support.apple.com/kb/HT5878">iOS 7: Font list</a></p>

<p><a href="https://developer.apple.com/library/ios/samplecode/DownloadFont/Introduction/Intro.html#//apple_ref/doc/uid/DTS40013404">苹果提供的Demo</a></p>

<p>具体实现方法可以看一看Demo。</p>

<p>在Readme中有一句很奇怪的话：</p>

<pre><code>Fonts downloaded from applications in this manner are not installed permanently. 
The system may decide to remove them under certain usage scenarios.
</code></pre>

<p>按照Readme中的说法，系统可能会删除我们下载的字体，所以在每次程序启动前都需要检查一遍，使用的时候要确定字体已经可以使用。</p>

<p>什么场景下会删除？Readme中并没有详细说。</p>

<p>Demo效果图：</p>

<p><img src="http://Hydra2050.github.io/images/201312141811.png" alt="Demo效果图" /></p>

<h2>总结</h2>

<h3>将字体包打包到工程的方法</h3>

<p>适用情况：字体包比较小</p>

<p>存在的问题：对字体包大小有限制；版权的问题</p>

<h3>动态下载字体库的方法</h3>

<p>适用场景：字体包比较大，无法打包到工程（一个完整的字体包要10M多）；不用担心版权的问题。</p>

<p>字体会下载一个系统的路径/private/var/mobile/Library/Assets/com_apple_MobileAsset_Font/，一次下载，所有的App都能使用（在被系统删除之前）。</p>

<p>存在的问题：</p>

<ol>
<li>需要预先下载10几M的字体包，对用户来说是一个负担</li>
<li>每次应用重新启动，即使已经下载，都需要“预热”一次。需要先到上面所说的下载路径进行匹配，检查是否已经下载；如果已经下载，就会将字体缓存到另外一个cache目录下，才能使用，这个过程需要3s左右的时间。（我试过手动删除下载的字体包，但不去改里面的XML文件，结果匹配出错返回错误结果，但是不再会重新下载）</li>
<li>可选择的字体有限制，只能从苹果提高的列表中选择</li>
<li>只支持IOS6以上（按照目前的统计来看，这个慢慢不是问题了）</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CocoaPods：Objective-C的依赖管理工具]]></title>
    <link href="http://Hydra2050.github.io/blog/2013/12/11/cocoapods/"/>
    <updated>2013-12-11T21:31:32+08:00</updated>
    <id>http://Hydra2050.github.io/blog/2013/12/11/cocoapods</id>
    <content type="html"><![CDATA[<h2>引子</h2>

<p>在iOS开发中，工程中会用到很多第三方的开源库，像ASIHttpRequest、AFNetworking、JSONKit等等。要添加一个第三方库的：</p>

<ol>
<li>先查找并下载到本地，然后添加到工程</li>
<li>添加第三方开源库所依赖的framework</li>
<li>一些第三方开源库需要修改OtherLinerFlag的参数</li>
</ol>


<p>一旦开始一个新的项目，这些工作又要重新做一遍。另外还需要自己管理第三方库更新的问题。</p>

<p>有没有一个能够帮助我们自动完成这一系列工作的方法呢？没错，就是今天的主角——CocoaPods。</p>

<h2>CocoaPods介绍</h2>

<p>CocoaPods为你的Xcode工程管理库的依赖。你的工程的第三方库依赖由一个单独的叫做Podfile的文本文件管理。CocoaPods可以获取第三方库源代码、解决库的依赖，然后将你的工程与它放在一个新创建的workspace中。最终的目标是通过创建一个更集中的生态系统，以提高第三方的开源库可发现性和参与性。</p>

<p>官网地址：<a href="http://cocoapods.org/">http://cocoapods.org/</a></p>

<p>GitHub地址：<a href="https://github.com/cocoapods/cocoapods">https://github.com/cocoapods/cocoapods</a></p>

<h2>安装CocoaPods</h2>

<p>CocoaPods使用Ruby创建，需要预先安装ruby。Mac下自默认安装好了ruby，可以通过命令查看：</p>

<pre><code>ruby --version
</code></pre>

<p>使用ruby的gem命令安装：</p>

<pre><code>sudo gem install cocoapods
pod setup
</code></pre>

<h2>修改gem源</h2>

<p>默认的gem源为<code>https://rubygems.org/</code>,国内的网络有可能被墙。如果无法访问这个网址，可以使用淘宝的RubyGems 镜像。修改方法：</p>

<pre><code>$ gem sources --remove https://rubygems.org/
$ gem sources -a http://ruby.taobao.org/
</code></pre>

<p>查看gem源：</p>

<pre><code>gem source -l
</code></pre>

<p>修改成功后，可以按照上面的步骤安装。</p>

<h2>更新CocoaPods</h2>

<p>更新已安装的CocoaPods，只需要输入：</p>

<pre><code>sudo gem update cocoapods
</code></pre>

<p>参见：<a href="http://guides.cocoapods.org/using/getting-started.html">CocoaPods Getting Started</a></p>

<h2>使用CocoaPods查找第三方库</h2>

<p>CocoaPods可以很方便地查找第三方库：</p>

<pre><code>pod search ReactiveCocoa
</code></pre>

<h2>将CocoaPods添加到Xcode工程</h2>

<p>创建一个<a href="http://guides.cocoapods.org/using/the-podfile.html">Podfile</a>文件，添加你所需要的第三方库文件：</p>

<pre><code>platform :ios, '6.0'
pod 'AFNetworking', '~&gt; 2.0'  
pod 'ObjectiveSugar', '~&gt; 0.5'
</code></pre>

<p>保存并放在工程的根目录，然后：</p>

<pre><code>pod install
</code></pre>

<p>这样就会生成一个MyApp.xcworkspace，以后经通过使用这个打开工程，而不是原来的MyApp.xcodeproj.</p>

<p>如果需要更新工程使用的第三方库，只需要编辑Podfile文件，然后再次执行pod install 即可。</p>

<h2>集成到一个已存在的workspace中</h2>

<p>如果想将CocoaPods集成到一个已经存在的workspace中，只需要在Podfile中增加一句：</p>

<pre><code>workspace 'MyWorkspace'
</code></pre>

<h2>这一系列命令后到底做了什么</h2>

<p>使用pod install命令，实际做了：</p>

<ol>
<li>创建或者更新workspace</li>
<li>将你的工程添加到这个workspace中</li>
<li>如果需要将CocoaPods静态库工程添加到workspace中</li>
<li>添加libPods.a</li>
<li>将CocoaPods的Xocde configurations file添加到你的工程</li>
<li>将你的工程的target configurations改变为急于CocoaPods的</li>
<li>添加一个编译参数来拷贝pods中的资源文件到你的app bundle。i.e. a ‘Script build phase’ after all other build phases with the following:
Shell: /bin/sh
Script: ${SRCROOT}/Pods/PodsResources.sh</li>
</ol>


<p>参见：<a href="http://guides.cocoapods.org/using/using-cocoapods.html#what-is-happening-behind-the-scenes?">Using CocoaPods</a></p>

<h2>定义私有库</h2>

<p>在开发的过程中，可以定义将通用的部分定义成私有的库，便于快速开发。</p>

<h3>Podspec</h3>

<p>.podspec文件是一个库的描述文件。.podspec文件可以标识该第三方库所需要的源码文件、依赖库、编译选项，以及其他第三方库需要的配置。</p>

<p>在安装pods的时候，会从<a href="https://github.com/CocoaPods/CocoaPods">https://github.com/CocoaPods/CocoaPods</a>下载，里面包含了所有第三方库的.podspec文件。可以通过查看当前用户根目录下的.cocoapods/repos/master/  路径。</p>

<p>以AFNetworking为例：</p>

<pre><code>Pod::Spec.new do |s|
s.name     = 'AFNetworking'
s.version  = '2.0.2'
s.license  = 'MIT'
s.summary  = 'A delightful iOS and OS X networking framework.'
s.homepage = 'https://github.com/AFNetworking/AFNetworking'
s.authors  = { 'Mattt Thompson' =&gt; 'm@mattt.me' }
s.source   = { :git =&gt; 'https://github.com/AFNetworking/AFNetworking.git', :tag =&gt; "2.0.2", :submodules =&gt; true }
s.requires_arc = true

...
...

end
</code></pre>

<h3>创建pods私有库描述文件</h3>

<p>创建命令：</p>

<pre><code>$ pod spec create REPO_NAME
</code></pre>

<p>会生成一个.podsepc文件。根据注释可以方便理解各个配置项的意义。</p>

<h3>创建本地podsepc</h3>

<p>在.cocoapods/repos/master/  路径下，创建文件，名称为新创建的私有库名称，在目录下创建不同版本路径，然后将对应的.podsepc文件拷贝到对应目录下。</p>

<p>然后使用pods搜索：</p>

<pre><code>$ pod search REPO_NAME
</code></pre>

<p>看看是否能够搜索到新创建的库。</p>

<h3>删除pods私有Repo</h3>

<p>输入命令：</p>

<pre><code>pod repo remove [name]
</code></pre>

<h2>总结</h2>

<p>使用CocoaPods管理第三方库，能够帮助完成很多之前繁琐的工作，提高工作效率。第三方库的更新更是省心了不少，不再需要再一个一个查看，哪个第三方库更新了没有。</p>

<p>另外有一款APP，<a href="http://davander.com/podlife.html">Podlife</a>，让我们了解Pods上第三方库更新的情况，很不错。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013杭州西部越野]]></title>
    <link href="http://Hydra2050.github.io/blog/2013/12/11/hang-zhou-xi-bu-yue-ye/"/>
    <updated>2013-12-11T00:02:55+08:00</updated>
    <id>http://Hydra2050.github.io/blog/2013/12/11/hang-zhou-xi-bu-yue-ye</id>
    <content type="html"><![CDATA[<p>2013杭州西部越野是一次环杭州城山脊越野跑：从西湖区转塘风水洞出发，穿越周浦、龙坞、西湖三大山脊，最终到达终点浙大玉泉校区。这条线路也被称为“风浙线”，全程约42公里。</p>

<p><img src="http://Hydra2050.github.io/images/hzxbyys.jpg" alt="2013杭州西部越野路线图" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于UITableView的一个有趣的问题]]></title>
    <link href="http://Hydra2050.github.io/blog/2013/12/10/guan-yu-uitableview/"/>
    <updated>2013-12-10T23:03:49+08:00</updated>
    <id>http://Hydra2050.github.io/blog/2013/12/10/guan-yu-uitableview</id>
    <content type="html"><![CDATA[<h2>起因</h2>

<p>今天碰到了一个很有趣的问题，大概现象是这个样子的：在一个可以动态增加、删除tablviewcell的页面，每个cell上有一个输入框，当离开页面的时候，记录cell个数、输入框内容，下次进入自动填充显示。</p>

<p>发现之前在ios6上运行完全没有问题，但是在ios7上，一旦删除过一条后，退出页面，再进来，第一个行的输入框记录的内容会变成删除的那个cell的输入框内容。</p>

<p style="color:red" > 另外一个值得注意的地方是，cell个数很少，没有超过tableview的高度。</p>


<p>难道又是ios7兼容的问题，原来一直都没有问题啊？</p>

<p>好吧，开始查看代码，单步调试，看看到底是哪一步逻辑出错。</p>

<h2>哪里出了问题</h2>

<p>在退出页面，保持内容的时候，大概有这样一段代码逻辑：</p>

<pre><code>for(UIView* v in self.tableView.subviews)
{
    if([v isKindOfClass:[UITableViewCell class]])
    {
        UITextField* textField = cell.myTextField;
        // 取出textField.text 根据cell的 indexPath值 保存到data model
    }
}
</code></pre>

<p>单步调试的时候，发现tableview上竟然存在一个为nil的cell。不错，就是我们删除的那个cell。程序内并没有非空检测，结果取它的的indexPath.row ，得到的值为零。这样就将它的textField内容保存了下来。</p>

<h2>删掉的cell为什么还在</h2>

<p>这是该到我们的利器大显身手了——<a href="http://revealapp.com/">Reveal</a>。
我写了一个demo，最初有6个cell，功能是点击cell，就让cell的个数减一。当我删除五行后，在Reveal中可以看到：</p>

<p><img src="http://Hydra2050.github.io/images/tvst.png" alt="Reveal截图" /></p>

<p>是的，那个cell还在！还在tableview上，只不过被隐藏掉了。
打印tableview上的cell：</p>

<pre><code>&lt;UITableViewCell: 0x755be20; frame = (0 220; 320 44); text = '5'; hidden = YES; autoresize = W; layer = &lt;CALayer: 0x755bf50&gt;&gt;
&lt;UITableViewCell: 0x755b680; frame = (0 176; 320 44); text = '4'; hidden = YES; autoresize = W; layer = &lt;CALayer: 0x755b480&gt;&gt;
&lt;UITableViewCell: 0x755aee0; frame = (0 132; 320 44); text = '3'; hidden = YES; autoresize = W; layer = &lt;CALayer: 0x755ae10&gt;&gt;
&lt;UITableViewCell: 0x755a870; frame = (0 88; 320 44); text = '2'; hidden = YES; autoresize = W; layer = &lt;CALayer: 0x755a730&gt;&gt;
&lt;UITableViewCell: 0x7559f60; frame = (0 44; 320 44); text = '1'; hidden = YES; autoresize = W; layer = &lt;CALayer: 0x755a090&gt;&gt;
&lt;UITableViewCell: 0x7556f70; frame = (0 0; 320 44); text = '0'; hidden = YES; autoresize = W; layer = &lt;CALayer: 0x75570f0&gt;&gt;
</code></pre>

<p>可以看到，还是存在6个cell对象。</p>

<h2>好吧，那为什么当初在ios6上没有问题呢</h2>

<p>ios6上运行没有问题，不代表代码逻辑没有问题，只不过问题被巧妙的掩藏过去了。</p>

<p>问题的关键在于查找到的顺序：在ios7中，被删除的cell会最后被遍历，会覆盖row为0的内容；而在ios6中，被删除的cell最先被遍历，虽然会先写入错误的内容，但是后面会被真正的第0行内容覆盖，所以才看起来没有问题。</p>

<p>终于，又解决了一个有趣的bug。</p>

<h2>总结</h2>

<p>这种遍历的方式本来就有问题，应该根据indexPath，遍历查找cell。另外程序缺少异常情况的处理，cell为空时，没有做异常处理。对UITableView的机制缺乏了解，通过这个bug又有了新的认识。</p>

<p>Reveal乃居家旅行必备神器。</p>

<p>也许很多时候，我们埋下了陷阱，由于某种巧合，表面上安然无事。但是终究有一天会暴漏出来。要不断提高代码质量。</p>

<p>（ps：如果没有埋下这个错误，也许就没有了今天解决问题的乐趣，就不会又进一步的了解。就像那句话说的：无知让我感到痛苦，无知为我带来快乐。）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[适配IOS7]]></title>
    <link href="http://Hydra2050.github.io/blog/2013/12/10/ios7gua-pei-xiang-guan/"/>
    <updated>2013-12-10T22:19:21+08:00</updated>
    <id>http://Hydra2050.github.io/blog/2013/12/10/ios7gua-pei-xiang-guan</id>
    <content type="html"><![CDATA[<p>最近在做一些与ios7适配相关的工作，打算持续更新一些ios7适配的一些内容。</p>

<p>// TODO</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WWDC字幕]]></title>
    <link href="http://Hydra2050.github.io/blog/2013/12/09/wwdczi-mu/"/>
    <updated>2013-12-09T23:24:34+08:00</updated>
    <id>http://Hydra2050.github.io/blog/2013/12/09/wwdczi-mu</id>
    <content type="html"><![CDATA[<h2><a href="http://asciiwwdc.com/">ASCIIwwdc</a></h2>

<p>Searchable full-text transcripts of WWDC sessions</p>

<p><a href="https://github.com/mattt/asciiwwdc.com">source code on GitHub</a></p>
]]></content>
  </entry>
  
</feed>
